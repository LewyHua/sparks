// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: favorite.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavoriteService_FavoriteAction_FullMethodName        = "/favorite.FavoriteService/FavoriteAction"
	FavoriteService_GetVideoFavoriteCount_FullMethodName = "/favorite.FavoriteService/GetVideoFavoriteCount"
	FavoriteService_GetUserFavoriteList_FullMethodName   = "/favorite.FavoriteService/GetUserFavoriteList"
	FavoriteService_GetUserFavoriteCount_FullMethodName  = "/favorite.FavoriteService/GetUserFavoriteCount"
	FavoriteService_GetUserFavoritedCount_FullMethodName = "/favorite.FavoriteService/GetUserFavoritedCount"
	FavoriteService_IsUserFavorite_FullMethodName        = "/favorite.FavoriteService/IsUserFavorite"
)

// FavoriteServiceClient is the client API for FavoriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteServiceClient interface {
	FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error)
	GetVideoFavoriteCount(ctx context.Context, in *VideoFavoriteCountRequest, opts ...grpc.CallOption) (*VideoFavoriteCountResponse, error)
	GetUserFavoriteList(ctx context.Context, in *UserFavoriteListRequest, opts ...grpc.CallOption) (*UserFavoriteListResponse, error)
	GetUserFavoriteCount(ctx context.Context, in *UserFavoriteCountRequest, opts ...grpc.CallOption) (*UserFavoriteCountResponse, error)
	GetUserFavoritedCount(ctx context.Context, in *UserFavoritedCountRequest, opts ...grpc.CallOption) (*UserFavoritedCountResponse, error)
	IsUserFavorite(ctx context.Context, in *IsUserFavoriteRequest, opts ...grpc.CallOption) (*IsUserFavoriteResponse, error)
}

type favoriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteServiceClient(cc grpc.ClientConnInterface) FavoriteServiceClient {
	return &favoriteServiceClient{cc}
}

func (c *favoriteServiceClient) FavoriteAction(ctx context.Context, in *FavoriteActionRequest, opts ...grpc.CallOption) (*FavoriteActionResponse, error) {
	out := new(FavoriteActionResponse)
	err := c.cc.Invoke(ctx, FavoriteService_FavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetVideoFavoriteCount(ctx context.Context, in *VideoFavoriteCountRequest, opts ...grpc.CallOption) (*VideoFavoriteCountResponse, error) {
	out := new(VideoFavoriteCountResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetVideoFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetUserFavoriteList(ctx context.Context, in *UserFavoriteListRequest, opts ...grpc.CallOption) (*UserFavoriteListResponse, error) {
	out := new(UserFavoriteListResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetUserFavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetUserFavoriteCount(ctx context.Context, in *UserFavoriteCountRequest, opts ...grpc.CallOption) (*UserFavoriteCountResponse, error) {
	out := new(UserFavoriteCountResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetUserFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) GetUserFavoritedCount(ctx context.Context, in *UserFavoritedCountRequest, opts ...grpc.CallOption) (*UserFavoritedCountResponse, error) {
	out := new(UserFavoritedCountResponse)
	err := c.cc.Invoke(ctx, FavoriteService_GetUserFavoritedCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteServiceClient) IsUserFavorite(ctx context.Context, in *IsUserFavoriteRequest, opts ...grpc.CallOption) (*IsUserFavoriteResponse, error) {
	out := new(IsUserFavoriteResponse)
	err := c.cc.Invoke(ctx, FavoriteService_IsUserFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServiceServer is the server API for FavoriteService service.
// All implementations must embed UnimplementedFavoriteServiceServer
// for forward compatibility
type FavoriteServiceServer interface {
	FavoriteAction(context.Context, *FavoriteActionRequest) (*FavoriteActionResponse, error)
	GetVideoFavoriteCount(context.Context, *VideoFavoriteCountRequest) (*VideoFavoriteCountResponse, error)
	GetUserFavoriteList(context.Context, *UserFavoriteListRequest) (*UserFavoriteListResponse, error)
	GetUserFavoriteCount(context.Context, *UserFavoriteCountRequest) (*UserFavoriteCountResponse, error)
	GetUserFavoritedCount(context.Context, *UserFavoritedCountRequest) (*UserFavoritedCountResponse, error)
	IsUserFavorite(context.Context, *IsUserFavoriteRequest) (*IsUserFavoriteResponse, error)
	mustEmbedUnimplementedFavoriteServiceServer()
}

// UnimplementedFavoriteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServiceServer struct {
}

func (UnimplementedFavoriteServiceServer) FavoriteAction(context.Context, *FavoriteActionRequest) (*FavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedFavoriteServiceServer) GetVideoFavoriteCount(context.Context, *VideoFavoriteCountRequest) (*VideoFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoFavoriteCount not implemented")
}
func (UnimplementedFavoriteServiceServer) GetUserFavoriteList(context.Context, *UserFavoriteListRequest) (*UserFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoriteList not implemented")
}
func (UnimplementedFavoriteServiceServer) GetUserFavoriteCount(context.Context, *UserFavoriteCountRequest) (*UserFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoriteCount not implemented")
}
func (UnimplementedFavoriteServiceServer) GetUserFavoritedCount(context.Context, *UserFavoritedCountRequest) (*UserFavoritedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoritedCount not implemented")
}
func (UnimplementedFavoriteServiceServer) IsUserFavorite(context.Context, *IsUserFavoriteRequest) (*IsUserFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserFavorite not implemented")
}
func (UnimplementedFavoriteServiceServer) mustEmbedUnimplementedFavoriteServiceServer() {}

// UnsafeFavoriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServiceServer will
// result in compilation errors.
type UnsafeFavoriteServiceServer interface {
	mustEmbedUnimplementedFavoriteServiceServer()
}

func RegisterFavoriteServiceServer(s grpc.ServiceRegistrar, srv FavoriteServiceServer) {
	s.RegisterService(&FavoriteService_ServiceDesc, srv)
}

func _FavoriteService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_FavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).FavoriteAction(ctx, req.(*FavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetVideoFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetVideoFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetVideoFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetVideoFavoriteCount(ctx, req.(*VideoFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetUserFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetUserFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetUserFavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetUserFavoriteList(ctx, req.(*UserFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetUserFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetUserFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetUserFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetUserFavoriteCount(ctx, req.(*UserFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_GetUserFavoritedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavoritedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).GetUserFavoritedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_GetUserFavoritedCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).GetUserFavoritedCount(ctx, req.(*UserFavoritedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavoriteService_IsUserFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServiceServer).IsUserFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteService_IsUserFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServiceServer).IsUserFavorite(ctx, req.(*IsUserFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteService_ServiceDesc is the grpc.ServiceDesc for FavoriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favorite.FavoriteService",
	HandlerType: (*FavoriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteAction",
			Handler:    _FavoriteService_FavoriteAction_Handler,
		},
		{
			MethodName: "GetVideoFavoriteCount",
			Handler:    _FavoriteService_GetVideoFavoriteCount_Handler,
		},
		{
			MethodName: "GetUserFavoriteList",
			Handler:    _FavoriteService_GetUserFavoriteList_Handler,
		},
		{
			MethodName: "GetUserFavoriteCount",
			Handler:    _FavoriteService_GetUserFavoriteCount_Handler,
		},
		{
			MethodName: "GetUserFavoritedCount",
			Handler:    _FavoriteService_GetUserFavoritedCount_Handler,
		},
		{
			MethodName: "IsUserFavorite",
			Handler:    _FavoriteService_IsUserFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "favorite.proto",
}
